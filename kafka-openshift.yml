apiVersion: v1
kind: Template
metadata:
  name: kafkanetes
objects:
- apiVersion: v1
  data:
    server.keystore.jks: 
    server.truststore.jks: /u3+7QAAAAIAAAABAAAAAgAFbXlrZXkAAAFTE6hZdAAFWC41MDkAAAUrMIIFJzCCAw+gAwIBAgIQcwPKqE3k0oZPLQMvBXamPDANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDExtSYWJvYmFuayBHcm91cCBSb290IENBIDIwMTQwHhcNMTQxMDIyMTMyNzMzWhcNMzQxMDIyMTMzNTQzWjAmMSQwIgYDVQQDExtSYWJvYmFuayBHcm91cCBSb290IENBIDIwMTQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDa5boiStoSpMPHzgyspIt1z1L1zLRLoSIlIkGzsfzzAZWyiPb2GeCJQgw8NID/VdbQUgJAqnRXBJ64HJPviU6gBNC8ytgCR1iom2LZdRV4AloXwaOk9BUAI5n7F126iDSidqf4SMytvks5ls4UiM1iDi2QLcaf3TaVxvbtM+8X4/wfwX3JZ2SmuhwwCk8bKgls1lMwEawYTY6fQVNydMZMa4frNo4UAA3lmR7GaKD0XcGfVcu75MBhJnmu2IOW0iuIS/JliyBMO4SZgjsdiPkRjnUXmiLzXsG6iNBlrfEWXLlZpuAAO7PT6lq9Q/pAG6047E7MxzGVlJauzRctww6/gSX2VXwJHo4NcOUvgfP9KFZ+U09ypps1pXp5Dr8SKCfvyW5C4/zfB+OqszDg7LTOkrkuJt7kbQoZz7JW+sgvW01oiE0L2eJzRC6VcFtXw9nWteQ6EQzjbrvMgGVtWTFueG3z7c/qjfyxPRYxFvV35VutvAVTjm/yVkO/foGrA7cx6juIG7IR56rWM+6WTT65Yz9KIzXHF/Pb7hKqapTtcK/qQ96jLz0/xNmnpxcrPLYxYEclMaGIJhH7SeaaOFWuB+Ym6lD990Pc6JIJZbTqyLdpBWYedbqWv/OeoGjviExRYJRLl4m7jPUlTGcAuMz3j2Jy1Bjkmt7C5lZZRaigBwIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUUx8sDnqQtcWShnp7O9Qlg2CfEf0wEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAB9yZvCTJWl3ulJ17OKcbKC//rKfebcSx5IZBhPDgYZrgedy8PgW1xgvLIIRCMQxg/TiZPfMUL7JqJVyUSvdIEm5dFy8yB+NnkXPuUnhM+WFMcZaq5vvLH0EgGPPQuBDbZaJnUJwuv2E+It/OGNjdwGaowzgKzZUQy1bIjVhOpyjFKes0gIAVpth+aQHmpULODE6b2FLCxu5RHmAk3Rr3yWz6+SXLAC0cYUO0Y71kQRMCHBWS01jF4vVWxg38uOPzcAKFASVcfbx3/cxLZKJc6P8vq9EcJFqi3REswckiIBF4VxMoK4AL44D3k80y0+xTl/jXMifl1otKJ3nYFJK+u9+Y6tp+fDm7CBFNYpt+XxM7rgxrmerzFDYQFqOy5roD6Jff8CDQ3cpxUQVDwJBEDJFBodrX6pkZF00Vu8ih+YjHkCB2u259Kei7vR0wmTml4jSlsGysyYfGUZzMnkzhbiQIgLZp4Ml6HJZ6UgrkQxHFWcwDlS4K3NbwkwAjFlYa+Eg2/GM5SZph8hFxDi97mIsMUfqEz7gO8TomWQDnXXjf6ncVO1R/ZdhcYdWeBGuPmdrL2cFM0dYbeYs6csdjbome0W5hqiQ2ZEytZrkj9Bc8Hho+rqi0Luht0NQtj/GtnWZO6tA6Zii9y6flt0sAXDoTnX6LIipcwutBiYqnzbsvhjebCn+Ka9aH3cGeDtJY6KuFyA=
  kind: Secret
  metadata:
    name: ssl
  type: Opaque
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: broker-discovery
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: zookeeperwebui
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: view
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: broker-discovery
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: system:endpoint-controller
  roleRef:
    name: system:endpoint-controller
  subjects:
  - kind: ServiceAccount
    name: broker-discovery
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: kafkanetes
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: broker-discovery
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: zookeeper-webui
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: kafka
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 512Mi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: kafkanetes-zk-1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 512Mi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: kafkanetes-zk-2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 512Mi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: kafkanetes-zk-3
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 512Mi
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: zookeeper-webui
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: zookeeper-webui:latest
    postCommit: {}
    resources: {}
    source:
      git:
        ref: master
        uri: https://github.com/jorisjumanne/zookeeper-webui.git
      secrets: []
      type: Git
    strategy:
      dockerStrategy:
      type: Docker
    triggers:
    - github:
        secret: a2lWoVscJ95f2BajsV4I
      type: GitHub
    - generic:
        secret: Xf3D-PkW0GruFwJuU0I6
      type: Generic
    - type: ConfigChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: kafkanetes
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: kafkanetes:latest
    postCommit: {}
    resources: {}
    source:
      git:
        uri: https://github.com/jorisjumanne/kafka-openshift.git
      type: Git
    strategy:
      dockerStrategy:
      type: Docker
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: broker-discovery
    name: broker-discovery
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: broker-discovery:latest
    postCommit: {}
    resources: {}
    source:
      git:
        uri: https://github.com/jorisjumanne/broker-discovery.git
      secrets: []
      type: Git
    strategy:
      dockerStrategy:
      type: Docker
    triggers:
    - github:
        secret: Nr8YVD3ZD8NfGRLBdmSH
      type: GitHub
    - generic:
        secret: zEdmg0w7C6NW4G-WbD0W
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: zookeeper-webui
  spec:
    replicas: 1
    selector:
      deploymentconfig: zookeeper-webui
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: zookeeper-webui
      spec:
        containers:
        - env:
          - name: ZK_DEFAULT_NODE
            value: kafkanetes-zk:2181
          image: zookeeper-webui:latest
          imagePullPolicy: Always
          name: zookeeper-webui
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - zookeeper-webui
        from:
          kind: ImageStreamTag
          name: zookeeper-webui:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: kafka
  spec:
    replicas: 1
    selector:
      deploymentconfig: kafka
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: kafka
          broker-discovery: "yes"
          deploymentconfig: kafka
      spec:
        containers:
        - args:
          - config/server.properties
          - --override
          - ssl.keystore.password=notsecret
          - --override
          - ssl.key.password=notsecret
          - --override
          - ssl.truststore.password=notsecret
          - --override
          - ssl.keystore.location=/security/server.keystore.jks
          - --override
          - ssl.truststore.location=/security/server.truststore.jks
          - --override
          - ssl.client.auth=requested
          - --override
          - security.inter.broker.protocol=SSL
          - --override
          - authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer
          - --override
          - allow.everyone.if.no.acl.found=true
          command:
          - bash
          - -x
          - bin/kafka-server-start.sh
          image: kafkanetes:latest
          imagePullPolicy: Always
          name: kafkanetes
          ports:
          - containerPort: 9093
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9093
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /tmp/kafka-logs
            name: kafka-logs
          - mountPath: /security
            name: kafka-keystores
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: kafka-logs
          emptyDir: {}
        - name: kafka-keystores
          secret:
            secretName: ssl
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        containerNames:
        - kafkanetes
        from:
          kind: ImageStreamTag
          name: kafkanetes:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: broker-discovery
  spec:
    replicas: 1
    selector:
      deploymentconfig: broker-discovery
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.broker-discovery.image.entrypoint: '["/bin/bash"]'
        labels:
          deploymentconfig: broker-discovery
      spec:
        containers:
        - env:
          - name: FILTER
            value: broker-discovery=yes
          image: broker-discovery:latest
          imagePullPolicy: Always
          name: broker-discovery
          resources: {}
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            exec:
              command:
              - grep
              - sleeping
              - /proc/1/task/1/status
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: broker-discovery
        serviceAccountName: broker-discovery
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - broker-discovery
        from:
          kind: ImageStreamTag
          name: broker-discovery:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: kafkanetes-debug
  spec:
    replicas: 1
    selector:
      deploymentconfig: kafkanetes-debug
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: kafkanetes-debug
      spec:
        containers:
        - args:
          - -c
          - import signal; signal.pause()
          command:
          - python
          env:
          - name: KAFKA_HEAP_OPTS
            value: -Xmx1024M
          image: kafkanetes:latest
          imagePullPolicy: Always
          name: kafkanetes
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        containerNames:
        - kafkanetes
        from:
          kind: ImageStreamTag
          name: kafkanetes:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: kafkanetes-zk-1
  spec:
    replicas: 1
    selector:
      deploymentconfig: kafkanetes-zk-1
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: kafkanetes-zk
          deploymentconfig: kafkanetes-zk-1
      spec:
        containers:
        - args:
          - config/zookeeper.properties
          - kafkanetes-zk
          - "1"
          - "3"
          command:
          - bin/zookeeper-server-start-multiple.sh
          image: kafkanetes:latest
          imagePullPolicy: Always
          name: kafkanetes
          ports:
          - containerPort: 2181
            protocol: TCP
          - containerPort: 2888
            protocol: TCP
          - containerPort: 3888
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 2181
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /tmp/zookeeper
            name: zookeeper
        dnsPolicy: ClusterFirst
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 2181
          timeoutSeconds: 1
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: zookeeper
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        containerNames:
        - kafkanetes
        from:
          kind: ImageStreamTag
          name: kafkanetes:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: kafkanetes-zk-2
  spec:
    replicas: 1
    selector:
      deploymentconfig: kafkanetes-zk-2
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          service: kafkanetes-zk
          deploymentconfig: kafkanetes-zk-2
      spec:
        containers:
        - args:
          - config/zookeeper.properties
          - kafkanetes-zk
          - "2"
          - "3"
          command:
          - bin/zookeeper-server-start-multiple.sh
          image: kafkanetes:latest
          imagePullPolicy: Always
          name: kafkanetes
          ports:
          - containerPort: 2181
            protocol: TCP
          - containerPort: 2888
            protocol: TCP
          - containerPort: 3888
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 2181
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /tmp/zookeeper
            name: zookeeper
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: zookeeper
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        containerNames:
        - kafkanetes
        from:
          kind: ImageStreamTag
          name: kafkanetes:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: kafkanetes-zk-3
  spec:
    replicas: 1
    selector:
      deploymentconfig: kafkanetes-zk-3
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: kafkanetes-zk
          deploymentconfig: kafkanetes-zk-3
      spec:
        containers:
        - args:
          - config/zookeeper.properties
          - kafkanetes-zk
          - "3"
          - "3"
          command:
          - bin/zookeeper-server-start-multiple.sh
          image: kafkanetes:latest
          imagePullPolicy: Always
          name: kafkanetes
          ports:
          - containerPort: 2181
            protocol: TCP
          - containerPort: 2888
            protocol: TCP
          - containerPort: 3888
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 2181
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /tmp/zookeeper
            name: zookeeper
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: zookeeper
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        containerNames:
        - kafkanetes
        from:
          kind: ImageStreamTag
          name: kafkanetes:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: kafkanetes-zk
  spec:
    ports:
    - name: 2181-tcp
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: 2888-tcp
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: 3888-tcp
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      service: kafkanetes-zk
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: kafkanetes-zk-1
  spec:
    ports:
    - name: 2181-tcp
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: 2888-tcp
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: 3888-tcp
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      deploymentconfig: kafkanetes-zk-1
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: kafkanetes-zk-2
  spec:
    ports:
    - name: 2181-tcp
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: 2888-tcp
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: 3888-tcp
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      deploymentconfig: kafkanetes-zk-2
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: kafkanetes-zk-3
  spec:
    ports:
    - name: 2181-tcp
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: 2888-tcp
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: 3888-tcp
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      deploymentconfig: kafkanetes-zk-3
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      run: zookeeper-webui
    name: zookeeper-webui
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: zookeeper-webui
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      run: zookeeper-webui
    name: zookeeper-webui
  spec:
    to:
      kind: Service
      name: zookeeper-webui
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      run: kafkanetes-zk
    name: kafkanetes-zk
  spec:
    to:
      kind: Service
      name: kafkanetes-zk
